name: Advanced CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  ci:
    name: CI Pipeline
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        node-version: [18, 20]
        os: [ubuntu-latest, windows-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint stage
        run: npm run lint
        continue-on-error: ${{ matrix.node-version == '16' }}
      
      - name: Test stage
        run: npm run test -- --coverage --watchAll=false
      
      - name: Build stage
        run: npm run build
      
      - name: Create dist folder with main files
        run: |
          mkdir -p dist
          cp -r .next dist/
          cp package.json dist/
          cp README.md dist/ || echo "README.md not found, skipping"
        shell: bash
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.os }}-node${{ matrix.node-version }}
          path: |
            dist/
            .next/
          retention-days: 7
      
      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.os }}-node${{ matrix.node-version }}
          path: coverage/
          retention-days: 7
        if: always()

  deploy-ready:
    name: Deployment Ready
    needs: ci
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: All CI checks passed
        run: echo "All CI stages completed successfully. Ready for deployment!"

  # Deployment job - only runs after CI passes
  deploy:
    name: Deploy to Render
    needs: ci
    runs-on: ubuntu-latest
    # Only deploy on pushes to main (not on PRs)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          echo "ðŸš€ Triggering deployment to Render..."

          # Define JSON payload safely
          payload="{\"clearCache\":false}"
          echo "Payload: $payload"

          # Trigger Render deploy
          payload=$(jq -n --argjson clearCache false '{clearCache: $clearCache}')
            curl -s -X POST \
              "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys" \
              -H "Authorization: Bearer ${RENDER_API_KEY}" \
              -H "Content-Type: application/json" \
              -d "$payload"

          echo "Response: $response"

          # Extract deploy ID from response JSON
          deploy_id=$(echo "$response" | grep -o '"id":"[^"]*"' | head -1 | cut -d'"' -f4)

          if [ -z "$deploy_id" ]; then
            echo "Failed to trigger deployment"
            exit 1
          fi

          echo "Deployment triggered successfully!"
          echo "Deploy ID: $deploy_id"
          echo "Check status at: https://dashboard.render.com"

          # Save deploy_id for later steps if needed
          echo "DEPLOY_ID=$deploy_id" >> $GITHUB_ENV

      - name: Deployment Summary
        run: |
          echo "## Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Application deployed to Render successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check your deployment at: https://dashboard.render.com" >> $GITHUB_STEP_SUMMARY
